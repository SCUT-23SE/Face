# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class InlineObject1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_id=None, face_images_base64=None):  # noqa: E501
        """InlineObject1 - a model defined in OpenAPI

        :param user_id: The user_id of this InlineObject1.  # noqa: E501
        :type user_id: int
        :param face_images_base64: The face_images_base64 of this InlineObject1.  # noqa: E501
        :type face_images_base64: List[str]
        """
        self.openapi_types = {
            'user_id': int,
            'face_images_base64': List[str]
        }

        self.attribute_map = {
            'user_id': 'userId',
            'face_images_base64': 'faceImagesBase64'
        }

        self._user_id = user_id
        self._face_images_base64 = face_images_base64

    @classmethod
    def from_dict(cls, dikt) -> 'InlineObject1':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The inline_object_1 of this InlineObject1.  # noqa: E501
        :rtype: InlineObject1
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_id(self):
        """Gets the user_id of this InlineObject1.

        用户ID  # noqa: E501

        :return: The user_id of this InlineObject1.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this InlineObject1.

        用户ID  # noqa: E501

        :param user_id: The user_id of this InlineObject1.
        :type user_id: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def face_images_base64(self):
        """Gets the face_images_base64 of this InlineObject1.

        待验证的人脸图像Base64编码数组  # noqa: E501

        :return: The face_images_base64 of this InlineObject1.
        :rtype: List[str]
        """
        return self._face_images_base64

    @face_images_base64.setter
    def face_images_base64(self, face_images_base64):
        """Sets the face_images_base64 of this InlineObject1.

        待验证的人脸图像Base64编码数组  # noqa: E501

        :param face_images_base64: The face_images_base64 of this InlineObject1.
        :type face_images_base64: List[str]
        """
        if face_images_base64 is None:
            raise ValueError("Invalid value for `face_images_base64`, must not be `None`")  # noqa: E501

        self._face_images_base64 = face_images_base64
